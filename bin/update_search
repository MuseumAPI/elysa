#! /usr/bin/env ruby

require 'json'
require 'elasticsearch'
require 'ruby-progressbar'
require 'hashie'
require 'museum_provenance'

prov_settings = Hashie::Mash.new

prov_settings.mappings!.artwork!.include_in_all = false

# prov_settings.analysis!.analyzer = {
#   "goodly_text": {
#     "tokenizer": "standard",
#     "filter":  [ "lowercase", "asciifolding"]
#   }
# }




prov_settings.mappings!.artwork!.properties = {
  title: {
    type: "string",
    analyzer: "english",
    include_in_all: true
  },
  artist: {
    type: "string",
    analyzer: "english",
    include_in_all: true
  },
  accession_number: {
    type: "string",
    index: "not_analyzed",
    include_in_all: true
  },
  medium: {
    type: "string",
    index: "not_analyzed",
    include_in_all: true
  },
  acqisition_method: {
    type: "string",
    index: "not_analyzed",
  },
  images: {
    type: "string",
    index: "no"
  },
  provenance: {
    type: "string",
    index: "no",
    include_in_all: true
  },
  creation_earliest: {
    type: "date",
    format: "dateOptionalTime"
  },
  creation_latest: {
    type: "date",
    format: "dateOptionalTime"
  },
  exhibitions: {
    type: "string",
    analyzer: "english",
    include_in_all: true
  },
  exhibition_details: {
    type: "string",
    index: "no"
  },
  artist_details: {
    type: "string",
    index: "no"
  }

}


    # {
    #   "title": "Cylinder",
    #   "id": 1024528,
    #   "accession_number": "84.12.1",
    #   "creators": [
    #     1001131
    #   ],
    #   "creation_earliest": "1984-01-01",
    #   "creation_latest": "1984-01-01",
    #   "creation_address": "",
    #   "provenance": "Dale Chihuly, Seattle, WA",
    #   "medium": "Glass",
    #   "acquisition_id": 1000352,
    #   "credit_line": "Decorative Arts Purchase Fund",
    #   "acqisition_method": "Purchase",
    #   "acquisition_date": "1984-04-05",
    #   "images": [
    #     "http://www.cmoa.org/CollectionImage.aspx?irn=1526&size=Medium"
    #   ]
    # },

client = Elasticsearch::Client.new log: false

# Delete current DB
if client.indices.exists index: 'cmoa_provenance'
  client.indices.delete index: 'cmoa_provenance'
end

## Recreate DB
client.indices.create index: 'cmoa_provenance', body: prov_settings.to_h

# Find all the things
things =  File.open( "data/thing.json", "r" ) { |f| JSON.load( f )}["thing"]
bar = ProgressBar.create(:title => "Parsing Things", :starting_at => 0, :total => things.count)
things = things.collect.with_index do |thing, i|
  bar.increment
  thing
end.compact

# Find all the people
parties =  File.open( "data/party.json", "r" ) { |f| JSON.load( f )}["party"]
bar = ProgressBar.create(:title => "Parsing Parties", :starting_at => 0, :total => parties.count)
party_index = {}
parties.each do |p| 
   id = p["id"]
   party_index[id] = p
   bar.increment

end

# Find all the events
events =  File.open( "data/event.json", "r" ) { |f| JSON.load( f )}["event"]
bar = ProgressBar.create(:title => "Parsing Events", :starting_at => 0, :total => events.count)
event_thing_index = {}
event_index = {}
events.each do |event| 
  id = event["id"]
  event["formatted_date"] = MuseumProvenance::TimeSpan.new(event["commencement"],event["completion"]).to_s
  # Link venues to parties
  if event["venues"]
    event['venues'] = event['venues'].collect do |v|
      v["name"] = party_index[v["id"]]["name"] #if party_index[v["id"]]
      v["formatted_date"] = MuseumProvenance::TimeSpan.new(v["commencement"],v["completion"]).to_s
      v
    end
  end
  # link organizers to parties
  if event['organizers'] 
    event['organizers'] = event['organizers'].collect do |organizer_id|
      obj = {id: organizer_id}
      obj["name"] = party_index[organizer_id]["name"]# if party_index[organizer_id]
      obj
    end
  end
  # index the events by object
  if  event["things"]
    event["things"].each do |thing|
      event_thing_index[thing["id"]] ||= []
      event_thing_index[thing["id"]].push id
    end
  end
  event_index[id] = event
  bar.increment
end

# Denormalize people's names, exhibitions
bar = ProgressBar.create(:title => "Denormalizing", :starting_at => 0, :total => things.count)
things.each do |v|
  unless v["creators"].nil?
    v["artist"] = v["creators"].collect do |p|
      party_index[p]['name'] if party_index[p]
    end.compact.join(", ")
     v["artist_details"] = party_index[p].to_json
  end
  exhibitions = event_thing_index[v["id"]]
  if exhibitions
    v["exhibitions"]        = exhibitions.collect{ |e| event_index[e]["title"] }.join(", ")
    begin
      v['exhibition_details'] = exhibitions.collect{ |e| event_index[e]}.compact.to_json
    rescue TypeError
      puts exhibitions.collect{ |e| event_index[e]}
    end
  end
  bar.increment
end


# Load 'em up.
bar = ProgressBar.create(:title => "Generating Search", :starting_at => 0, :total => things.count)
things.each do |val|
  client.index index: 'cmoa_provenance',
               type: 'artwork',
               id: val['id'],
               body: val
  bar.increment
end



#File.open("thing_index.json", "w") {|f| f.puts JSON.pretty_generate(things)}
